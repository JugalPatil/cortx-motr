#!/bin/bash
#set -x
set -e

MOTR_ROOT=$(realpath ../../..)
MOTR_UTILS_DIR=${MOTR_ROOT}/utils
MOTR_ST_UTILS_DIR=${MOTR_ROOT}/motr/st/utils/
MOTR_VAR_DIR=/var/motr
TEST_ROOT=$MOTR_VAR_DIR/all2all_test
CURRENT_CDF=$PWD/cdf.yaml
M0CRATE_CFG_IN=$PWD/m0crate.yaml.in
M0CRATE_CFG=$PWD/m0crate.yaml
CONFD_XC=/var/lib/hare/confd.xc
LOOP_IMG_DIR=$TEST_ROOT
CLIENT_PID=
M0D_DIR_COMMON=$MOTR_VAR_DIR/m0d-0x720000000000000
ADDB_DUMP_DIR="/tmp/a2a-addb-out"

POOL_WIDTH=4
IPOOL_WIDTH=2

. ../helpers
. ${MOTR_ROOT}/scripts/addb-py/chronometry/common/common_funcs


function stop_cluster()
{
    hctl shutdown
}

function bootstrap_cluster()
{
    hctl bootstrap --mkfs $CURRENT_CDF
}

function create_m0crate_cfg()
{
    local hctl_json_out=$(hctl status --json)
    local svcs_json_out=$(echo $hctl_json_out | jq -r '.nodes[] | .svcs[]')

    local PROF=$(echo $hctl_json_out | jq -r '.profiles[] | .fid')
    local MOTR_LOCAL_ADDR=$(echo $svcs_json_out | jq -r 'select( .name | contains("m0_client")) | .ep')
    local PROCESS_FID=$(echo $svcs_json_out | jq -r 'select( .name | contains("m0_client")) | .fid')
    local MOTR_HA_ADDR=$(echo $svcs_json_out | jq -r 'select( .name | contains("hax")) | .ep')

    local M0CRATE_CFG_TMP=m0crate_cfg.tmp
    cp $M0CRATE_CFG_IN $M0CRATE_CFG_TMP
    sed -i "s/###__PROF__###/$PROF/g" $M0CRATE_CFG_TMP
    sed -i "s/###__MOTR_LOCAL_ADDR__###/$MOTR_LOCAL_ADDR/g" $M0CRATE_CFG_TMP
    sed -i "s/###__PROCESS_FID__###/$PROCESS_FID/g" $M0CRATE_CFG_TMP
    sed -i "s/###__MOTR_HA_ADDR__###/$MOTR_HA_ADDR/g" $M0CRATE_CFG_TMP
    mv $M0CRATE_CFG_TMP $M0CRATE_CFG
}

function ha_msg_send_transient()
{
    # Here we send "TRANSIENT" messages to trigger start of
    # HA messages handling on the m0d side as dtm0 doesn't
    # handle them until "TRANSIENT" received due to incomplete
    # implementation on the Hare side.
    for i in $(seq 0 $((${#DTM0_IT_M0D_ENDPOINTS[@]}-1))) ; do
        for j in $(seq 0 $((${#DTM0_IT_M0D_FIDS_DEC[@]}-1))) ; do
            if [[ $i -ne $j ]]; then
                $MOTR_ST_UTILS_DIR/ha_msg_send.sh "${DTM0_IT_M0D_ENDPOINTS[$i]}" "^r|${DTM0_IT_M0D_FIDS_DEC[$j]}" "transient"
                break
            fi
        done
    done
}

function ha_msg_send_online()
{
    # Here we send "ONLINE" messages to trigger connections logic.
    for i in $(seq 0 $((${#DTM0_IT_M0D_ENDPOINTS[@]}-1))) ; do
        for j in $(seq 0 $((${#DTM0_IT_M0D_FIDS_DEC[@]}-1))) ; do
            if [[ $i -ne $j ]]; then
                $MOTR_ST_UTILS_DIR/ha_msg_send.sh "${DTM0_IT_M0D_ENDPOINTS[$i]}" "^r|${DTM0_IT_M0D_FIDS_DEC[$j]}" "online"
            fi
        done
    done
}

function ha_msg_send_cli_online()
{
    # Here we send "ONLINE" messages to connect servers to client.
    for i in $(seq 0 $((${#DTM0_IT_M0D_ENDPOINTS[@]}-1))) ; do
        $MOTR_ST_UTILS_DIR/ha_msg_send.sh "${DTM0_IT_M0D_ENDPOINTS[$i]}" "^r|${DTM0_IT_CLI_FID_DEC}" "online"
    done
}

function expected_trace_lines_num()
{
    local pattern="$1"
    local exp_cnt=$2
    local cnt

    for i in ${!DTM0_IT_M0D_PIDS[@]} ; do
        cnt=$($MOTR_ROOT/utils/trace/m0trace -i "${M0D_DIR_COMMON}${DTM0_IT_M0D_FIDS_HEX[i]}/m0trace.${DTM0_IT_M0D_PIDS[i]}" | grep "$pattern" | wc -l)
        if [[ $cnt -ne $exp_cnt ]]; then
            return 1
        fi
    done

    return 0
}

function addb_dump()
{
    local outdir="${ADDB_DUMP_DIR}"
    local outfile
    local inpfile
    local fid
    local a2d=$MOTR_ROOT/utils/m0addb2dump

    rm -fR "${outdir}"
    mkdir "${outdir}"

    for i in ${!DTM0_IT_M0D_PIDS[@]} ; do
        fid=$(echo "${DTM0_IT_M0D_FIDS_HEX[i]}" | awk -F'x' '{ print $2; }')
        outfile="${outdir}/addb_${fid}.dump"
        inpfile="${M0D_DIR_COMMON}${DTM0_IT_M0D_FIDS_HEX[i]}/addb-stobs-${DTM0_IT_M0D_PIDS[i]}/o/100000000000000:2"
        _info "Dumping ${inpfile} -> ${outfile} ..."
        $a2d -f "${inpfile}" > "${outfile}"
    done

    inpfile="$PWD/addb_${CLIENT_PID}/o/100000000000000:2"
    fid=$(echo "$DTM0_IT_CLI_FID_HEX" | awk -F'x' '{ print $2; }')
    outfile="${outdir}/addb_${fid}.dump"
    _info "Dumping ${inpfile} -> ${outfile} ..."
    $a2d -f "${inpfile}" > "${outfile}"
}

function traces_dump()
{
    local fid
    local out

    for i in ${!DTM0_IT_M0D_PIDS[@]} ; do
        fid=$(echo "${DTM0_IT_M0D_FIDS_HEX[i]}" | awk -F'x' '{ print $2; }')
        out="m0trace_${fid}.dump"
        _info "Dumping ${out}..."
        $MOTR_ROOT/utils/trace/m0trace -i "${M0D_DIR_COMMON}${DTM0_IT_M0D_FIDS_HEX[i]}/m0trace.${DTM0_IT_M0D_PIDS[i]}" > "${out}"
    done

    out="m0trace_${CLIENT_PID}.dump"
    _info "Dumping ${out}..."
    $MOTR_ROOT/utils/trace/m0trace -i "$PWD/m0trace.${CLIENT_PID}" > "${out}"
}

function processes_status_check()
{
    local rc=0

    for fid in ${DTM0_IT_M0D_FIDS_HEX[@]} ; do
        svc_name="m0d@0x720000000000000${fid}.service"
        systemctl is-failed $svc_name > /dev/null && {
            _err "Process $svc_name failed"
            rc=1
        }
    done

    return $rc
}

function fail()
{
    _err "$1"
    stop_cluster
    _err "TEST STATUS: FAIL"
    exit 1
}

function main()
{
    ${MOTR_UTILS_DIR}/m0setup --init-loop-only -s 1 -d ${TEST_ROOT} --pool-width ${POOL_WIDTH} --ipool-width ${IPOOL_WIDTH}

    _info "Bootstrapping the cluster using Hare..."
    bootstrap_cluster

    dtm0_it_fids_get
    dtm0_it_pids_get

    _info "Create m0crate configuration..."
    create_m0crate_cfg

    _info "Run the client..."
    $MOTR_ROOT/motr/m0crate/m0crate -S $M0CRATE_CFG &
    cli_pid=$!
    wait ${cli_pid}
    _info "Client pid: ${cli_pid}"
    CLIENT_PID=${cli_pid}

    stop_cluster

    addb_dump
    _info "Dumping traces..."
    traces_dump

    _info "Checking processes exit status..."
    processes_status_check || {
        _err "TEST STATUS: FAIL"
        exit 1
    }

    _info "TEST STATUS: PASSED"
}

main
