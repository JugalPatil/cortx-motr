#!/bin/bash
#set -x
set -e

MOTR_ROOT=$(realpath ../../..)
MOTR_ST_UTILS_DIR=${MOTR_ROOT}/motr/st/utils/
MOTR_VAR_DIR=/var/motr
TEST_ROOT=$MOTR_VAR_DIR/all2all_test
CURRENT_CDF=$PWD/test.yaml
CONFD_XC=/var/lib/hare/confd.xc
LOOP_IMG_DIR=$TEST_ROOT

M0D_DIR_COMMON=$MOTR_VAR_DIR/m0d-0x720000000000000

M0D_ENDPOINTS=()
M0D_FIDS_DEC=()
M0D_FIDS_HEX=()
M0D_PIDS=()

POOL_WIDTH=4
IPOOL_WIDTH=2
IMGS_CNT=$((POOL_WIDTH + IPOOL_WIDTH))

. ${MOTR_ROOT}/scripts/addb-py/chronometry/common/common_funcs


function stop_cluster()
{
    hctl shutdown
}

function bootstrap_cluster()
{
    hctl bootstrap --mkfs $CURRENT_CDF
}

#============= DEVICES SECTION =============#
function init_loop_devices()
{
    fini_loop_devices()

    if [[ ! -d $LOOP_IMG_DIR ]] ; then
        _warn "'$LOOP_IMG_DIR' doesn't exist, creating.."
        mkdir -p "$LOOP_IMG_DIR"
    fi

    create_loop_images
    setup_loop_devices
}

function fini_loop_devices()
{
    cleanup_loop_devices
    cleanup_loop_images
}

function create_loop_images()
{
    _info "Creating $IMGS_CNT file images, 10GiB each, in '$LOOP_IMG_DIR'"
    for i in $(seq $IMGS_CNT) ; do
        local img_file="$LOOP_IMG_DIR/disk$i.img"
        dd if=/dev/zero of="$img_file" \
           bs=1M seek=$(( 10 * 1024 - 1 )) count=1 &>/dev/null
    done
}

function setup_loop_devices()
{
    _info "Setting up loop devices"
    for i in $(seq $IMGS_CNT) ; do
        local img_file="$LOOP_IMG_DIR/disk$i.img"
        local free_loopdev=$(losetup -f)
        loop_devsused[$i]=$free_loopdev
        _info "$free_loopdev => $img_file"
        [[ -e $img_file ]] ||
            die "image file '$img_file' doesn't exist"
        losetup $free_loopdev "$img_file"
    done
}

function cleanup_loop_devices()
{
    _info "Removing loop devices"
    for i in $(seq $IMGS_CNT) ; do
        local img_file="$LOOP_IMG_DIR/disk$i.img"
        if [[ -e $img_file ]] ; then
            local loop_todel=$(losetup -j $img_file -O name | grep loop)
            if [[ -n $loop_todel ]] ; then
                losetup -d $loop_todel
            fi
        fi
    done
}

function cleanup_loop_images()
{
    _info "Removing file images"
    for i in $(seq $IMGS_CNT) ; do
        local img_file="$LOOP_IMG_DIR/disk$i.img"
        rm -f "$img_file"
    done
}
############################################

function get_m0d_pids()
{
    local pids=""
    local pid

    for fid in ${M0D_FIDS_HEX[@]}; do
        pid=$(ps ax | grep m0d | grep $fid | awk '{ print $1; }')
        M0D_PIDS+=($pid)
        pids+="$pid "
    done

    _info "m0d PIDs: $pids"
}

function get_params_for_ha_msgs()
{
    M0D_ENDPOINTS=($(hctl status --json | jq -r '.nodes[] | .svcs[] | select( .name | contains("ioservice")) | .ep' | sed -E 's/.*@tcp[:](.*)/\1/'))
    M0D_FIDS_HEX=($(hctl status --json | jq -r '.nodes[] | .svcs[] | select( .name | contains("ioservice")) | .fid' | sed -E 's/0x720+([0-9][:]0x[A-Za-z0-9]+)/\1/'))
    M0D_FIDS_DEC=($(hctl status --json | jq -r '.nodes[] | .svcs[] | select( .name | contains("ioservice")) | .fid' | sed -E 's/0x720+([0-9][:])(0x[A-Za-z0-9]+)/printf "%s%d" \1 \2/e'))
}

function ha_msg_send_transient()
{
    for i in `seq 0 $((${#M0D_ENDPOINTS[@]}-1))`; do
        for j in `seq 0 $((${#M0D_FIDS_DEC[@]}-1))`; do
            if [[ $i -ne $j ]]; then
                $MOTR_ST_UTILS_DIR/ha_msg_send.sh "${M0D_ENDPOINTS[$i]}" "^r|${M0D_FIDS_DEC[$j]}" "transient"
                break
            fi
        done
    done
}

function ha_msg_send_online()
{
    for i in `seq 0 $((${#M0D_ENDPOINTS[@]}-1))`; do
        for j in `seq 0 $((${#M0D_FIDS_DEC[@]}-1))`; do
            if [[ $i -ne $j ]]; then
                $MOTR_ST_UTILS_DIR/ha_msg_send.sh "${M0D_ENDPOINTS[$i]}" "^r|${M0D_FIDS_DEC[$j]}" "online"
            fi
        done
    done
}

function expected_trace_lines_num()
{
    local pattern="$1"
    local exp_cnt=$2
    local m0d_dir
    local cnt

    for i in ${!M0D_PIDS[@]}; do
        m0d_dir=${M0D_DIR_COMMON}${M0D_FIDS_HEX[i]}
        cnt=`$MOTR_ROOT/utils/trace/m0trace -i "${m0d_dir}/m0trace.${M0D_PIDS[i]}" | grep "$pattern" | wc -l`
        if [[ $cnt -ne $exp_cnt ]]; then
            return 1
        fi
    done

    return 0
}

function fail()
{
    _err "$1"
    stop_cluster
    _err "TEST STATUS: FAIL"
    exit 1
}

function main()
{
    init_loop_devices

    _info "Bootstrapping the cluster using Hare..."
    bootstrap_cluster

    get_params_for_ha_msgs
    get_m0d_pids

    _info "Checking traces..."
    expected_trace_lines_num "evented_proc_state" 0 || {
        fail "HA event handled instead of to be skipped, exiting."
    }

    _info "Sending TRANSIENT notifications to trigger HA messages handling..."
    ha_msg_send_transient

    _info "Checking traces..."
    expected_trace_lines_num "TRANSIENT received" 1 || {
        fail "Trigger message is not received, exiting."
    }

    _info "Sending ONLINE notifications to trigger connections logic..."
    ha_msg_send_online

    _info "Checking traces..."
    expected_trace_lines_num "DTM0 service: connected" 2 || {
        fail "Process is not connected, exiting"
    }

    stop_cluster
    fini_loop_devices

    _info "TEST STATUS: PASSED"
}

main
