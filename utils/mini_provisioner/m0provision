#!/usr/bin/env python3
#
# Copyright (c) 2020 Seagate Technology LLC and/or its Affiliates
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# For any questions about this software or licensing,
# please email opensource@seagate.com or cortx-questions@seagate.com.
#
import subprocess
import os
import sys
import getopt
import json
import time
import netifaces
from socket import gethostname
from typing import Dict, List, NamedTuple, Set
import re
from datetime import datetime
from collections import OrderedDict
from motr_mini_prov_class import motr_prov 


'''
workflow()
{
cat << EOF

    The m0provision script will be called by the provisioner after the
    installation of Motr RPM, for setting configurations and testing
    sanity of the setup.

EOF
}

help()
{
cat << EOF
    *** CAUTION ***

    The $0 script should be invoked only by the provisioner.
    Should be invoked with sudo.

    Usage:
    sudo $0 [ACTION] ARGS
        ACTION: post_install | init | config | test | reset
            ARGS (post_install) : TOBE implemented.
            ARGS (init)         : TOBE implemented.
            ARGS (config)       : config
            ARGS (test)         : test
            ARGS (reset)        : TOBE implemented.
EOF
}
'''

class M0provision(motr_prov):
    def __init__(self, index, url):
        self.opt_func = {"post_install":self.post_install_fn, "config":self.config_fn, "init":self.init_fn, "test" : self.test_fn}
        super().__init__(index, url) 
    def post_install_fn(self):
        pass
    def config_fn(self):
        print("In config url={}".format(self.url))
        super().config_lvm()
    def init_fn(self):
        print("In init url={}".format(self.url))
        super().configure_lnet_from_conf_store()
    def test_fn(self):
        print("In test url={}".format(self.url))



if __name__ == "__main__":
    print("No of args = {}".format(len(sys.argv)))
    print("Args = {}".format(sys.argv))
    if (len(sys.argv) != 2):
        print("Invalid num of arguments.")
        print("Use m0provision [post_install | config | init | test | reset]")
        sys.exit(2)
    conf_store_obj = M0provision('motr_prov_conf', 'json:///home/743120/mini_provisioner/motr_prov_conf.json')
    print("conf_store_obj.url={}".format(conf_store_obj.url)) 
    conf_store_obj.opt_func[sys.argv[1]]()

