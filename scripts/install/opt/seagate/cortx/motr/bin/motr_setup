#!/usr/bin/env python3
#
# Copyright (c) 2020 Seagate Technology LLC and/or its Affiliates
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# For any questions about this software or licensing,
# please email opensource@seagate.com or cortx-questions@seagate.com.
#
import subprocess
import os
import sys
import getopt
import json
import time
from socket import gethostname
from typing import Dict, List, NamedTuple, Set
import re
from datetime import datetime
from collections import OrderedDict
from motr_mini_prov import motr_prov

help_msg = ("The motr_setup script should be invoked only by the provisioner.\n"
            "Should be invoked with sudo.\n"
            "\n"
            "Usage:\n"
            "      sudo motr_setup <cmd> <url>\n"
            "      where:\n"
            "            cmd   post_install, config, init, test, reset, \n"
            "                  cleanup, upgrade, backup, restore, help\n"
            "            url   Config URL\n")

class M0provision(motr_prov):
    def __init__(self, index, url):
        self.opt_func = {"post_install":self.post_install_fn,
                         "config"      :self.config_fn,
                         "init"        :self.init_fn,
                         "test"        :self.test_fn,
                         "reset"       :self.reset_fn,
                         "cleanup"     :self.cleanup_fn,
                         "upgrade"     :self.upgrade_fn,
                         "backup"      :self.backup_fn,
                         "restore"     :self.restore_fn,
                         "help"        :self.help_fn}
        super().__init__(index, url)

    def print_banner(self, name):
        print('-'*80)
        print('{:^80s}'.format(name))
        print('-'*80)

    def post_install_fn(self):
        super().validate_motr_rpm()

    def config_fn(self):
        super().config_motr()

    def init_fn(self):
        super().config_lvm()
        super().configure_lnet_from_conf_store()

    def test_fn(self):
        super().test_lnet()

    def reset_fn(self):
        pass

    def cleanup_fn(self):
        pass

    def upgrade_fn(self):
        pass

    def backup_fn(self):
        pass

    def restore_fn(self):
        pass

    def help_fn(self):
        sys.stdout.write("{}\n".format(help_msg))

if __name__ == "__main__":
    conf_store_obj = None

    if len(sys.argv) == 3:
        conf_store_obj = M0provision('motr_prov_conf', sys.argv[2])
    else:
        sys.stdout.write(f"Invalid arguments:\n")
        sys.stdout.write("{}\n".format(help_msg))
        sys.exit(1)

    if sys.argv[1] in conf_store_obj.opt_func:
        conf_store_obj.print_banner(f"m0provision {sys.argv[1]}")
        conf_store_obj.opt_func[sys.argv[1]]()
        sys.exit(0)
    else:
        sys.stderr.write(f"Invalid arguments:\n")
        conf_store_obj.opt_func[sys.argv[1]]()
        sys.exit(1)

